import { Component, Input } from '@angular/core';
import { KnoraConstants } from '@knora/core';
var GridViewComponent = /** @class */ (function () {
    function GridViewComponent() {
        this.KnoraConstants = KnoraConstants;
    }
    GridViewComponent.prototype.ngOnInit = function () {
    };
    GridViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kui-grid-view',
                    template: "<div>\n  <kui-progress-indicator *ngIf=\"isLoading\" [color]=\"'#D88958'\"></kui-progress-indicator>\n\n  <div fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutGap=\"grid\">\n\n    <div fxFlex.sm=\"50\" fxFlex.md=\"33.3\" fxFlex.lg=\"20\" fxFlex.xl=\"16.6\" fxFlex=\"16.6\" *ngFor=\"let res of result\" class=\"gv-preview\">\n      <mat-card class=\"link\">\n\n        <mat-card-subtitle>{{ontologyInfo?.getLabelForResourceClass(res.type)}}</mat-card-subtitle>\n        <mat-card-title>{{res.label}}</mat-card-title>\n\n\n        <mat-card-content *ngFor=\"let prop of res.properties | kuiKey\">\n          <!-- description -->\n          <div *ngFor=\"let val of prop.value | kuiKey\">\n            <div [ngSwitch]=\"val.value.getClassName()\">\n              <div class=\"lv-html-text\" *ngSwitchCase=\"KnoraConstants.ReadTextValueAsHtml\">\n                <kui-text-value-as-html [valueObject]=\"val.value\" [ontologyInfo]=\"ontologyInfo\" [bindEvents]=\"false\"></kui-text-value-as-html>\n                <p class=\"lv-read-more\"></p>\n              </div>\n              <div>\n                <kui-date-value *ngSwitchCase=\"KnoraConstants.ReadDateValue\" [valueObject]=\"val.value\" [calendar]=\"true\" [era]=\"true\"></kui-date-value>\n                <span *ngSwitchDefault=\"\">{{val.value.getContent()}}</span>\n              </div>\n              <br>\n              <span *ngIf=\"ontologyInfo?.getLabelForProperty(prop.key) !== 'Text'\">\n                {{ontologyInfo?.getLabelForProperty(prop.key)}}\n              </span>\n            </div>\n          </div>\n        </mat-card-content>\n\n      </mat-card>\n    </div>\n  </div>\n\n\n</div>",
                    styles: [".mat-form-field{width:320px}.fill-remaining-space{flex:1 1 auto}.center{text-align:center}.link{cursor:pointer}.lv-html-text{max-height:60px;position:relative;overflow:hidden}.lv-read-more{position:absolute;bottom:0;left:0;width:100%;text-align:center;margin:0;padding:30px 0;border-radius:3px}.gv-preview{margin:6px 0;padding:24px;word-wrap:break-word;border-radius:5px}.gv-preview .mat-card{height:160px;color:rgba(0,0,0,.81);overflow:hidden;padding-bottom:25px}.gv-preview .mat-card:hover{background:rgba(0,105,92,.39);color:#000}.gv-preview .mat-card:active{background:rgba(0,105,92,.61)}.gv-preview .mat-card .mat-card-title{font-size:12pt;font-weight:600}"]
                },] },
    ];
    /** @nocollapse */
    GridViewComponent.ctorParameters = function () { return []; };
    GridViewComponent.propDecorators = {
        result: [{ type: Input }],
        ontologyInfo: [{ type: Input }],
        isLoading: [{ type: Input }]
    };
    return GridViewComponent;
}());
export { GridViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brbm9yYS92aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvdmlldy9ncmlkLXZpZXcvZ3JpZC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTdDO0lBa0RFO1FBRkEsbUJBQWMsR0FBRyxjQUFjLENBQUM7SUFFaEIsQ0FBQztJQUVqQixvQ0FBUSxHQUFSO0lBQ0EsQ0FBQzs7Z0JBckRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLG9vREFxQ0w7b0JBQ0wsTUFBTSxFQUFFLENBQUMsdXBCQUF1cEIsQ0FBQztpQkFDbHFCOzs7Ozt5QkFHRSxLQUFLOytCQUNMLEtBQUs7NEJBQ0wsS0FBSzs7SUFTUix3QkFBQztDQUFBLEFBdkRELElBdURDO1NBYlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLbm9yYUNvbnN0YW50cyB9IGZyb20gJ0Brbm9yYS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAna3VpLWdyaWQtdmlldycsXG4gIHRlbXBsYXRlOiBgPGRpdj5cbiAgPGt1aS1wcm9ncmVzcy1pbmRpY2F0b3IgKm5nSWY9XCJpc0xvYWRpbmdcIiBbY29sb3JdPVwiJyNEODg5NTgnXCI+PC9rdWktcHJvZ3Jlc3MtaW5kaWNhdG9yPlxuXG4gIDxkaXYgZnhMYXlvdXQ9XCJyb3cgd3JhcFwiIGZ4TGF5b3V0LnhzPVwiY29sdW1uXCIgZnhMYXlvdXRHYXA9XCJncmlkXCI+XG5cbiAgICA8ZGl2IGZ4RmxleC5zbT1cIjUwXCIgZnhGbGV4Lm1kPVwiMzMuM1wiIGZ4RmxleC5sZz1cIjIwXCIgZnhGbGV4LnhsPVwiMTYuNlwiIGZ4RmxleD1cIjE2LjZcIiAqbmdGb3I9XCJsZXQgcmVzIG9mIHJlc3VsdFwiIGNsYXNzPVwiZ3YtcHJldmlld1wiPlxuICAgICAgPG1hdC1jYXJkIGNsYXNzPVwibGlua1wiPlxuXG4gICAgICAgIDxtYXQtY2FyZC1zdWJ0aXRsZT57e29udG9sb2d5SW5mbz8uZ2V0TGFiZWxGb3JSZXNvdXJjZUNsYXNzKHJlcy50eXBlKX19PC9tYXQtY2FyZC1zdWJ0aXRsZT5cbiAgICAgICAgPG1hdC1jYXJkLXRpdGxlPnt7cmVzLmxhYmVsfX08L21hdC1jYXJkLXRpdGxlPlxuXG5cbiAgICAgICAgPG1hdC1jYXJkLWNvbnRlbnQgKm5nRm9yPVwibGV0IHByb3Agb2YgcmVzLnByb3BlcnRpZXMgfCBrdWlLZXlcIj5cbiAgICAgICAgICA8IS0tIGRlc2NyaXB0aW9uIC0tPlxuICAgICAgICAgIDxkaXYgKm5nRm9yPVwibGV0IHZhbCBvZiBwcm9wLnZhbHVlIHwga3VpS2V5XCI+XG4gICAgICAgICAgICA8ZGl2IFtuZ1N3aXRjaF09XCJ2YWwudmFsdWUuZ2V0Q2xhc3NOYW1lKClcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImx2LWh0bWwtdGV4dFwiICpuZ1N3aXRjaENhc2U9XCJLbm9yYUNvbnN0YW50cy5SZWFkVGV4dFZhbHVlQXNIdG1sXCI+XG4gICAgICAgICAgICAgICAgPGt1aS10ZXh0LXZhbHVlLWFzLWh0bWwgW3ZhbHVlT2JqZWN0XT1cInZhbC52YWx1ZVwiIFtvbnRvbG9neUluZm9dPVwib250b2xvZ3lJbmZvXCIgW2JpbmRFdmVudHNdPVwiZmFsc2VcIj48L2t1aS10ZXh0LXZhbHVlLWFzLWh0bWw+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJsdi1yZWFkLW1vcmVcIj48L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxrdWktZGF0ZS12YWx1ZSAqbmdTd2l0Y2hDYXNlPVwiS25vcmFDb25zdGFudHMuUmVhZERhdGVWYWx1ZVwiIFt2YWx1ZU9iamVjdF09XCJ2YWwudmFsdWVcIiBbY2FsZW5kYXJdPVwidHJ1ZVwiIFtlcmFdPVwidHJ1ZVwiPjwva3VpLWRhdGUtdmFsdWU+XG4gICAgICAgICAgICAgICAgPHNwYW4gKm5nU3dpdGNoRGVmYXVsdD1cIlwiPnt7dmFsLnZhbHVlLmdldENvbnRlbnQoKX19PC9zcGFuPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJyPlxuICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cIm9udG9sb2d5SW5mbz8uZ2V0TGFiZWxGb3JQcm9wZXJ0eShwcm9wLmtleSkgIT09ICdUZXh0J1wiPlxuICAgICAgICAgICAgICAgIHt7b250b2xvZ3lJbmZvPy5nZXRMYWJlbEZvclByb3BlcnR5KHByb3Aua2V5KX19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L21hdC1jYXJkLWNvbnRlbnQ+XG5cbiAgICAgIDwvbWF0LWNhcmQ+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG5cbjwvZGl2PmAsXG4gIHN0eWxlczogW2AubWF0LWZvcm0tZmllbGR7d2lkdGg6MzIwcHh9LmZpbGwtcmVtYWluaW5nLXNwYWNle2ZsZXg6MSAxIGF1dG99LmNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlcn0ubGlua3tjdXJzb3I6cG9pbnRlcn0ubHYtaHRtbC10ZXh0e21heC1oZWlnaHQ6NjBweDtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW59Lmx2LXJlYWQtbW9yZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtsZWZ0OjA7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MDtwYWRkaW5nOjMwcHggMDtib3JkZXItcmFkaXVzOjNweH0uZ3YtcHJldmlld3ttYXJnaW46NnB4IDA7cGFkZGluZzoyNHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2JvcmRlci1yYWRpdXM6NXB4fS5ndi1wcmV2aWV3IC5tYXQtY2FyZHtoZWlnaHQ6MTYwcHg7Y29sb3I6cmdiYSgwLDAsMCwuODEpO292ZXJmbG93OmhpZGRlbjtwYWRkaW5nLWJvdHRvbToyNXB4fS5ndi1wcmV2aWV3IC5tYXQtY2FyZDpob3ZlcntiYWNrZ3JvdW5kOnJnYmEoMCwxMDUsOTIsLjM5KTtjb2xvcjojMDAwfS5ndi1wcmV2aWV3IC5tYXQtY2FyZDphY3RpdmV7YmFja2dyb3VuZDpyZ2JhKDAsMTA1LDkyLC42MSl9Lmd2LXByZXZpZXcgLm1hdC1jYXJkIC5tYXQtY2FyZC10aXRsZXtmb250LXNpemU6MTJwdDtmb250LXdlaWdodDo2MDB9YF1cbn0pXG5leHBvcnQgY2xhc3MgR3JpZFZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHJlc3VsdDtcbiAgQElucHV0KCkgb250b2xvZ3lJbmZvO1xuICBASW5wdXQoKSBpc0xvYWRpbmc7XG5cbiAgS25vcmFDb25zdGFudHMgPSBLbm9yYUNvbnN0YW50cztcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiJdfQ==