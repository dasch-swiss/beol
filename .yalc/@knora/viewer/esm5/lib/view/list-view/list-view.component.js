import { Component, Input } from '@angular/core';
import { KnoraConstants } from '@knora/core';
var ListViewComponent = /** @class */ (function () {
    function ListViewComponent() {
        this.KnoraConstants = KnoraConstants;
    }
    ListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kui-list-view',
                    template: "<div>\n    <kui-progress-indicator *ngIf=\"isLoading\" [color]=\"'#D88958'\"></kui-progress-indicator>\n\n    <mat-list class=\"list-view lv-items\" *ngFor=\"let res of result; let i = index; let last = last;\">\n        <mat-list-item class=\"link\">\n            <mat-icon matListIcon>image_search</mat-icon>\n            <h2 matLine class=\"lv-label\">{{ontologyInfo?.getLabelForResourceClass(res.type)}} - {{res.label}}</h2>\n\n            <div matLine *ngFor=\"let prop of res.properties | kuiKey\">\n                <div *ngFor=\"let val of prop.value | kuiKey\">\n                    <div [ngSwitch]=\"val.value.getClassName()\">\n\n                        <div matLine class=\"lv-html-text\" *ngSwitchCase=\"KnoraConstants.ReadTextValueAsHtml\">\n                            <kui-text-value-as-html [valueObject]=\"val.value\" [ontologyInfo]=\"ontologyInfo\" [bindEvents]=\"false\"></kui-text-value-as-html>\n                            <p class=\"lv-read-more\"></p>\n                        </div>\n\n                        <span matLine>\n                            <kui-date-value *ngSwitchCase=\"KnoraConstants.ReadDateValue\" [valueObject]=\"val.value\" [calendar]=\"true\" [era]=\"true\"></kui-date-value>\n                            <span *ngSwitchDefault=\"\">{{val.value.getContent()}}</span>\n                        </span>\n                        <br>\n                        <span matLine *ngIf=\"ontologyInfo?.getLabelForProperty(prop.key) !== 'Text'\">\n                            {{ontologyInfo?.getLabelForProperty(prop.key)}}\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n        </mat-list-item>\n\n        <mat-divider *ngIf=\"!last\"></mat-divider>\n\n    </mat-list>\n</div>",
                    styles: [".mat-form-field{width:320px}.fill-remaining-space{flex:1 1 auto}.center{text-align:center}.link{cursor:pointer}.lv-html-text{max-height:60px;position:relative;overflow:hidden}.lv-read-more{position:absolute;bottom:0;left:0;width:100%;text-align:center;margin:0;padding:30px 0;border-radius:3px}.mat-list .mat-list-item .mat-line{white-space:normal!important;max-width:95%}.list-view .mat-list-item{height:auto;min-height:40px;padding:8px 0}.lv-label{font-weight:700!important}.lv-items{max-width:600px}"]
                },] },
    ];
    /** @nocollapse */
    ListViewComponent.ctorParameters = function () { return []; };
    ListViewComponent.propDecorators = {
        result: [{ type: Input }],
        ontologyInfo: [{ type: Input }],
        isLoading: [{ type: Input }]
    };
    return ListViewComponent;
}());
export { ListViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brbm9yYS92aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvdmlldy9saXN0LXZpZXcvbGlzdC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU3QztJQStDSTtRQUZBLG1CQUFjLEdBQUcsY0FBYyxDQUFDO0lBRWhCLENBQUM7O2dCQS9DcEIsU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsK3VEQWtDUDtvQkFDSCxNQUFNLEVBQUUsQ0FBQyx3ZkFBd2YsQ0FBQztpQkFDcmdCOzs7Ozt5QkFHSSxLQUFLOytCQUNMLEtBQUs7NEJBQ0wsS0FBSzs7SUFNVix3QkFBQztDQUFBLEFBakRELElBaURDO1NBVlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtub3JhQ29uc3RhbnRzIH0gZnJvbSAnQGtub3JhL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2t1aS1saXN0LXZpZXcnLFxuICAgIHRlbXBsYXRlOiBgPGRpdj5cbiAgICA8a3VpLXByb2dyZXNzLWluZGljYXRvciAqbmdJZj1cImlzTG9hZGluZ1wiIFtjb2xvcl09XCInI0Q4ODk1OCdcIj48L2t1aS1wcm9ncmVzcy1pbmRpY2F0b3I+XG5cbiAgICA8bWF0LWxpc3QgY2xhc3M9XCJsaXN0LXZpZXcgbHYtaXRlbXNcIiAqbmdGb3I9XCJsZXQgcmVzIG9mIHJlc3VsdDsgbGV0IGkgPSBpbmRleDsgbGV0IGxhc3QgPSBsYXN0O1wiPlxuICAgICAgICA8bWF0LWxpc3QtaXRlbSBjbGFzcz1cImxpbmtcIj5cbiAgICAgICAgICAgIDxtYXQtaWNvbiBtYXRMaXN0SWNvbj5pbWFnZV9zZWFyY2g8L21hdC1pY29uPlxuICAgICAgICAgICAgPGgyIG1hdExpbmUgY2xhc3M9XCJsdi1sYWJlbFwiPnt7b250b2xvZ3lJbmZvPy5nZXRMYWJlbEZvclJlc291cmNlQ2xhc3MocmVzLnR5cGUpfX0gLSB7e3Jlcy5sYWJlbH19PC9oMj5cblxuICAgICAgICAgICAgPGRpdiBtYXRMaW5lICpuZ0Zvcj1cImxldCBwcm9wIG9mIHJlcy5wcm9wZXJ0aWVzIHwga3VpS2V5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgdmFsIG9mIHByb3AudmFsdWUgfCBrdWlLZXlcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBbbmdTd2l0Y2hdPVwidmFsLnZhbHVlLmdldENsYXNzTmFtZSgpXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgbWF0TGluZSBjbGFzcz1cImx2LWh0bWwtdGV4dFwiICpuZ1N3aXRjaENhc2U9XCJLbm9yYUNvbnN0YW50cy5SZWFkVGV4dFZhbHVlQXNIdG1sXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGt1aS10ZXh0LXZhbHVlLWFzLWh0bWwgW3ZhbHVlT2JqZWN0XT1cInZhbC52YWx1ZVwiIFtvbnRvbG9neUluZm9dPVwib250b2xvZ3lJbmZvXCIgW2JpbmRFdmVudHNdPVwiZmFsc2VcIj48L2t1aS10ZXh0LXZhbHVlLWFzLWh0bWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJsdi1yZWFkLW1vcmVcIj48L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gbWF0TGluZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a3VpLWRhdGUtdmFsdWUgKm5nU3dpdGNoQ2FzZT1cIktub3JhQ29uc3RhbnRzLlJlYWREYXRlVmFsdWVcIiBbdmFsdWVPYmplY3RdPVwidmFsLnZhbHVlXCIgW2NhbGVuZGFyXT1cInRydWVcIiBbZXJhXT1cInRydWVcIj48L2t1aS1kYXRlLXZhbHVlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ1N3aXRjaERlZmF1bHQ9XCJcIj57e3ZhbC52YWx1ZS5nZXRDb250ZW50KCl9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxicj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIG1hdExpbmUgKm5nSWY9XCJvbnRvbG9neUluZm8/LmdldExhYmVsRm9yUHJvcGVydHkocHJvcC5rZXkpICE9PSAnVGV4dCdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7e29udG9sb2d5SW5mbz8uZ2V0TGFiZWxGb3JQcm9wZXJ0eShwcm9wLmtleSl9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvbWF0LWxpc3QtaXRlbT5cblxuICAgICAgICA8bWF0LWRpdmlkZXIgKm5nSWY9XCIhbGFzdFwiPjwvbWF0LWRpdmlkZXI+XG5cbiAgICA8L21hdC1saXN0PlxuPC9kaXY+YCxcbiAgICBzdHlsZXM6IFtgLm1hdC1mb3JtLWZpZWxke3dpZHRoOjMyMHB4fS5maWxsLXJlbWFpbmluZy1zcGFjZXtmbGV4OjEgMSBhdXRvfS5jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9Lmxpbmt7Y3Vyc29yOnBvaW50ZXJ9Lmx2LWh0bWwtdGV4dHttYXgtaGVpZ2h0OjYwcHg7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6aGlkZGVufS5sdi1yZWFkLW1vcmV7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjA7bGVmdDowO3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjA7cGFkZGluZzozMHB4IDA7Ym9yZGVyLXJhZGl1czozcHh9Lm1hdC1saXN0IC5tYXQtbGlzdC1pdGVtIC5tYXQtbGluZXt3aGl0ZS1zcGFjZTpub3JtYWwhaW1wb3J0YW50O21heC13aWR0aDo5NSV9Lmxpc3QtdmlldyAubWF0LWxpc3QtaXRlbXtoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OjQwcHg7cGFkZGluZzo4cHggMH0ubHYtbGFiZWx7Zm9udC13ZWlnaHQ6NzAwIWltcG9ydGFudH0ubHYtaXRlbXN7bWF4LXdpZHRoOjYwMHB4fWBdXG59KVxuZXhwb3J0IGNsYXNzIExpc3RWaWV3Q29tcG9uZW50IHtcblxuICAgIEBJbnB1dCgpIHJlc3VsdDtcbiAgICBASW5wdXQoKSBvbnRvbG9neUluZm87XG4gICAgQElucHV0KCkgaXNMb2FkaW5nO1xuXG4gICAgS25vcmFDb25zdGFudHMgPSBLbm9yYUNvbnN0YW50cztcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbn1cbiJdfQ==